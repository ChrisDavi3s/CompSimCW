import numpy as np

def target_distribution(x):
    if 0 <= x <= 1:
        return 1
    else:
        return 0

def monte_carlo_a(iterations, delta):
    current_state = 0.1
    accepted_moves = 0
    total_sum = 0

    for _ in range(iterations):
        displacement = np.random.uniform(-delta, delta)
        proposed_state = current_state + displacement

        acceptance_ratio = min(1, target_distribution(proposed_state) / target_distribution(current_state))

        if np.random.rand() < acceptance_ratio:
            current_state = proposed_state
            accepted_moves += 1

        if 0 <= current_state <= 1:
            total_sum += current_state

    average_value = total_sum / accepted_moves
    acceptance_rate = accepted_moves / iterations

    return average_value, acceptance_rate

# Example usage
iterations = 1000000
delta = 1
average_value, acceptance_rate = monte_carlo_a(iterations, delta)

print("Average value in the range [0, 1]:", average_value)
print("Acceptance rate:", acceptance_rate)
