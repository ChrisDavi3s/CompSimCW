import numpy as np

def target_distribution(x):
    if 0 <= x <= 1:
        return 1
    else:
        return 0

def monte_carlo_b(iterations, delta):
    current_state = 0.3
    total_sum = 0

    for _ in range(iterations):
        acceptance_ratio = 0

        phi = np.random.uniform(1, 1 + delta)
        if np.random.uniform(0, 1) < 0.5:
            proposed_state = current_state * phi
        else:
            phi = 1/phi
            proposed_state = current_state * phi

        if(proposed_state > current_state):
            acceptance_ratio = 1
        else:
            acceptance_ratio = min(1, phi)

        if target_distribution(proposed_state) == 0:
            acceptance_ratio = 0

        if np.random.uniform(0, 1) <= acceptance_ratio:
            current_state = proposed_state
        
        total_sum += current_state

        if current_state > 1:
            print("current_state > 1")

    average_value = total_sum / iterations

    return average_value

# Example usage
iterations = 5000000
delta = 0.02
average_value = monte_carlo_b(iterations, delta)

print("Average value in the range [0, 1]:", average_value)

